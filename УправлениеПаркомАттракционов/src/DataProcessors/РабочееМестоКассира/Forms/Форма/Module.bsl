#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Элементы.СписокНоменклатуры.Видимость = Ложь;
	Элементы.ДекорацияБаллыКлиента.Видимость = Ложь;
	
	СоздатьДекарацииИзбранныхТоваров();
	
	ЗаполнитьДекорацииИзбранныхТоваров();

КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура БаллыКСписаниюПриИзменении(Элемент)

	РассчитатьСуммуДокумента();

КонецПроцедуры
&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	КлиентПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияБаллыКлиентаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

 	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "#Заполнить_") Тогда
 		
 		СтандартнаяОбработка = Ложь;
 		БаллыКСписанию = Число(СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки,"#Заполнить_" ,""));
 		
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатуры
&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ДанныеСтроки = Элемент.ТекущиеДанные;

	Если ДанныеСтроки.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;

	ДобавитьПозицию(ДанныеСтроки.Аттракцион, ДанныеСтроки.Цена);
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)

	ДанныеСтроки = Элемент.ТекущиеДанные;

	Если ДанныеСтроки.ЭтоГруппа Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;

	Значение = Новый Структура;
	Значение.Вставить("Номенклатура", ДанныеСтроки.Аттракцион);
	Значение.Вставить("Цена", ДанныеСтроки.Цена);

	ПараметрыПеретаскивания.Значение = Значение;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПозицииПродажи

&НаКлиенте
Процедура ПозицииПродажиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	Значение = ПараметрыПеретаскивания.Значение;

	Если ТипЗнч(Значение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ДобавитьПозицию(Значение.Номенклатура, Значение.Цена);

КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиАттракционПриИзменении(Элемент)

	ДанныеСтроки = Элементы.ПозицииПродажи.ТекущиеДанные;

	ДанныеСтроки.Цена = ПолучитьЦенуНоменклатуры(ДанныеСтроки.Номенклатура);

	РассчитатьСуммуСтроки(ДанныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиЦенаПриИзменении(Элемент)

	РассчитатьСуммуСтроки(Элементы.ПозицииПродажи.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиКоличествоПриИзменении(Элемент)

	РассчитатьСуммуСтроки(Элементы.ПозицииПродажи.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиПриИзменении(Элемент)

	РассчитатьСуммуДокумента();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ЗаписатьПродажу(Команда)
	НовыйДокумент = ЗаписатьПродажуНаСервере();
	ОповеститьОбИзменении(НовыйДокумент);
	ПоказатьОповещениеПользователя("Создан документ", ПолучитьНавигационнуюСсылку(НовыйДокумент), Строка(НовыйДокумент));
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)

	Элементы.СписокНоменклатуры.Видимость = Не Элементы.СписокНоменклатуры.Видимость;
	Элементы.ФормаПодбор.Пометка = Элементы.СписокНоменклатуры.Видимость;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДобавитьПозицию(Аттракцион, Цена)

	Фильтр = Новый Структура;
	Фильтр.Вставить("Номенклатура", Аттракцион);

	НайденныеСтроки = ПозицииПродажи.НайтиСтроки(Фильтр);

	Если НайденныеСтроки.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;

	Строка = ПозицииПродажи.Добавить();
	Строка.Номенклатура = Аттракцион;
	Строка.Цена = Цена;
	Строка.Сумма = Цена;
	Строка.Количество = 1;

	РассчитатьСуммуДокумента();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦенуНоменклатуры(Номенклатура)

	Возврат РегистрыСведений.ЦеныНоменклатуры.ЦенаНоменклатуры(Номенклатура)

КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуСтроки(ДанныеСтроки)

	ДанныеСтроки.Сумма = ДанныеСтроки.Цена * ДанныеСтроки.Количество;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()

	СуммаИтого = ПозицииПродажи.Итог("Сумма") - БаллыКСписанию;
	ЗаполнитьДекорациюБаллыКлиента();

КонецПроцедуры

&НаСервере
Функция ЗаписатьПродажуНаСервере()

	ДокОбъект = Документы.ПродажаБилета.СоздатьДокумент();

	ДокОбъект.Заполнить(Неопределено);

	ДокОбъект.Дата = ТекущаяДатаСеанса();
	ДокОбъект.Клиент = Клиент;
	ДокОбъект.БаллыКСписанию = БаллыКСписанию;
	ДокОбъект.СуммаДокумента = СуммаИтого;

	ДокОбъект.ПозицииПродажи.Загрузить(ПозицииПродажи.Выгрузить());

	Если Не ДокОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение "Не удалось записать продажи";
	КонецЕсли;

	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);

	СброситьЗаполнениеФормы();

	Возврат ДокОбъект.Ссылка;

КонецФункции

&НаСервере
Процедура КлиентПриИзмененииНаСервере()

	ЗаполнитьДекорациюБаллыКлиента();
	
	ЗаполнитьИзбранныеТоварыКлиента();
	
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзбранныеТоварыКлиента()
	
	СброситьИзбранныеТовары();

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 3
		|	ПродажиОбороты.Номенклатура,
		|	ПродажиОбороты.СуммаОборот КАК СуммаОборот
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&НачалоПериода, &КонецПериода,, Клиент = &Клиент) КАК ПродажиОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	СуммаОборот УБЫВ";
	
	Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(ТекущаяДатаСеанса(), -3 ));
	Запрос.УстановитьПараметр("КонецПериода", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СЧ = 0;
	
	Пока Выборка.Следующий() Цикл

		ТекущаяСтрока = ДинамическиеЭлементы[СЧ];
		ТекущаяСтрока.Активность = Истина;
		ТекущаяСтрока.Номенклатура = Выборка.Номенклатура;		
		
		СЧ = СЧ + 1;
		
	КонецЦикла;
		
	ЗаполнитьДекорацииИзбранныхТоваров();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДекорациюБаллыКлиента()
	
	Если Не ЗначениеЗаполнено(Клиент) Тогда
		Элементы.ДекорацияБаллыКлиента.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияБаллыКлиента.Видимость = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БонусныеБаллыКлиентовОстатки.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.БонусныеБаллыКлиентов.Остатки(, Клиент = &Клиент) КАК БонусныеБаллыКлиентовОстатки";

	Запрос.УстановитьПараметр("Клиент", Клиент);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОстатокБаллов = ВыборкаДетальныеЗаписи.СуммаОстаток;
	Иначе
		ОстатокБаллов = 0;
	КонецЕсли;
	
	Если ОстатокБаллов = 0 Тогда
		Элементы.ДекорацияБаллыКлиента.Заголовок = "У клиентов нет начисленных баллов";
		Возврат;
	КонецЕсли;
	
	МаксимальнаяДоля = Константы.МаксимальнаяДоляОплатыБаллами.Получить();
	МаксимумБалловКСписанию = Мин(ОстатокБаллов, СуммаИтого * МаксимальнаяДоля / 100);
	
	Шаблон = "Накоплено %1 баллов, из них списать можно %2. ";
	ШаблонСсылки = "#Заполнить_%1";
	СсылкаЗаполнения = СтрШаблон(ШаблонСсылки, XMLСтрока(МаксимумБалловКСписанию));
	Описание = СтрШаблон(Шаблон, ОстатокБаллов, МаксимумБалловКСписанию);
	
	ЧастиФорматированнойСтроки = Новый Массив();
	ЧастиФорматированнойСтроки.Добавить(Описание);
	ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока("Заполнить.", , , ,СсылкаЗаполнения));
	
	Элементы.ДекорацияБаллыКлиента.Заголовок = Новый ФорматированнаяСтрока(ЧастиФорматированнойСтроки);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДекарацииИзбранныхТоваров()
	
	КоличествоИзбранныхТоваров = 3;
	
	Для СЧ =1 По КоличествоИзбранныхТоваров Цикл
			
		ИмяДекарации = "ДекарцияИзбранныхТоваров_" + XMLСтрока(СЧ);
		
		Декорация = Элементы.Добавить(ИмяДекарации, Тип("ДекорацияФормы"), Элементы.ГруппаПопулярныеПокупки);	
		Декорация.Вид = ВидДекорацииФормы.Надпись;
		Декорация.Видимость = Ложь;
		Декорация.Гиперссылка = Истина;
		Декорация.УстановитьДействие("Нажатие", "Подключаемый_ДекорацияИзбранныхТоваровНажатие");
		
		СтрокаОписанияДекорации = ДинамическиеЭлементы.Добавить();
		СтрокаОписанияДекорации.ИмяЭлемента = ИмяДекарации;
					
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура СброситьИзбранныеТовары()
	
	Для Каждого Строка ИЗ ДинамическиеЭлементы Цикл
		Строка.Активность = Ложь;
		Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДекорацииИзбранныхТоваров()
	
	Для Каждого Строка Из ДинамическиеЭлементы Цикл
		
		Элемент = Элементы[Строка.ИмяЭлемента];
		Элемент.Видимость = Строка.Активность;
		Элемент.Заголовок = Строка.Номенклатура;
		
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияИзбранныхТоваровНажатие(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	
	Фильтр = Новый Структура("ИмяЭлемента", ИмяЭлемента);
	НайденныеСтроки = ДинамическиеЭлементы.НайтиСтроки(Фильтр);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Строка = НайденныеСтроки[0];
	
	Номенклатура = Строка.Номенклатура;
	
	ДобавитьПозицию(Номенклатура, ПолучитьЦенуНоменклатуры(Номенклатура));
	
КонецПроцедуры	

&НаСервере
Процедура СброситьЗаполнениеФормы()
	
	Клиент = Справочники.Клиенты.ПустаяСсылка();
	ПозицииПродажи.Очистить();
	СуммаИтого = 0;
	БаллыКСписанию = 0;

КонецПроцедуры


#КонецОбласти